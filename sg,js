const arr = [-2, 5, 3];

const findMax = (arr) => {
  let result = 0;
  for (let i = 0; i < arr.length; i++) {
    for (let j = i; j < arr.length; j++) {
      const counted = arr
        .slice(i, j + 1)
        .reduce((acc, value) => (acc += value), 0);
      if (result < counted) {
        result = counted;
      }
      // console.log(arr.slice(i, j+1).reduce((acc, value) => acc += value  , 0))
    }
  }
  return result;
  /*for(const number of arr) {
    
    if(number >= 0) {
      array.push(number)
    } else {
      
    }
  }
  return result*/
};
console.log(findMax(arr));
//console.log(findMax(arr))

describe("getMaxSubSum", function () {
  it("maximal subsum of [1, 2, 3] equals 6", function () {
    assert.equal(getMaxSubSum([1, 2, 3]), 6);
  });

  it("maximal subsum of [-1, 2, 3, -9] equals 5", function () {
    assert.equal(getMaxSubSum([-1, 2, 3, -9]), 5);
  });

  it("maximal subsum of [-1, 2, 3, -9, 11] equals 11", function () {
    assert.equal(getMaxSubSum([-1, 2, 3, -9, 11]), 11);
  });

  it("maximal subsum of [-2, -1, 1, 2] equals 3", function () {
    assert.equal(getMaxSubSum([-2, -1, 1, 2]), 3);
  });

  it("maximal subsum of [100, -9, 2, -3, 5] equals 100", function () {
    assert.equal(getMaxSubSum([100, -9, 2, -3, 5]), 100);
  });

  it("maximal subsum of [] equals 0", function () {
    assert.equal(getMaxSubSum([]), 0);
  });

  it("maximal subsum of [-1] equals 0", function () {
    assert.equal(getMaxSubSum([-1]), 0);
  });

  it("maximal subsum of [-1, -2] equals 0", function () {
    assert.equal(getMaxSubSum([-1, -2]), 0);
  });

  it("maximal subsum of [2, -8, 5, -1, 2, -3, 2] equals 6", function () {
    assert.equal(getMaxSubSum([2, -8, 5, -1, 2, -3, 2]), 6);
  });
});

console.log(getMaxSubSum([-2, 5, 3]));


//-------!!! РАБОЧИЙ ВАРИАНТ---------------------------

var maxSequence = function(arr){
  let result = 0;
  let currentSum = 0;
  
  for (let i = 0; i < arr.length; i++) {
    currentSum += arr[i];
    
    if (currentSum < 0) {
      currentSum = 0;
    }
    
    if (result < currentSum) {
      result = currentSum;
    }
  }
  
  return result;
}


// ====== На умножение


function adjacentElementsProduct(array) {
  if (array.length < 2) {
    return undefined; // Вернуть undefined, если массив содержит менее 2 элементов
  }

  let maxProduct = array[0] * array[1]; // Инициализировать максимальное произведение первыми двумя элементами

  for (let i = 1; i < array.length - 1; i++) {
    const product = array[i] * array[i + 1]; // Вычислить произведение двух смежных элементов

    if (product > maxProduct) {
      maxProduct = product; // Обновить максимальное произведение, если текущее произведение больше
    }
  }

  return maxProduct;
}
console.log(adjacentElementsProduct([3, 6, -2, -5, 7, 3]));
// 21


//^ - Соответствует началу строки.
//(?=.*[a-z]) - Это называется "позитивный просмотр вперед" (positive lookahead). Он гарантирует, что в строке есть хотя бы одна строчная буква.
//(?=.*[A-Z]) - Также позитивный просмотр вперед, который гарантирует, что в строке есть хотя бы одна заглавная буква.
//(?=.*\d) - Еще один позитивный просмотр вперед, гарантирующий, что в строке есть хотя бы одна цифра.
//[A-Za-z\d]{6,} - Это собственно само регулярное выражение для длины строки. Оно говорит, что строка должна состоять только из букв (как заглавных, так и строчных) и цифр и быть длиной не менее 6 символов.
//$ - Соответствует концу строки.

const REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{6,}$/;
